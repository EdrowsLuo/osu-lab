@name <Easing>

const float elastic_const=20.943951023931955;
const float elastic_const2=0.075;
const float back_const=1.70158;
const float back_const2=2.5949095;
const float bounce_const=0.36363636363636365;
const float pi=3.1415926535897932384626;

int te(float f){
	return int(floor(f+0.1));
}

float outBounce(float v){
	if (v < bounce_const)
		return 7.5625 * v * v;
	if (v < 2.0 * bounce_const)
		return 7.5625 * (v -= 1.5 * bounce_const) * v + 0.75;
	if (v < 2.5 * bounce_const)
		return 7.5625 * (v -= 2.25 * bounce_const) * v + 0.9375;
	return 7.5625 * (v -= 2.625 * bounce_const) * v + 0.984375;
}

float easing(float v,int code){
	if(code==0){
		return v;
	}else if(code>18){
		if(code<28){
			if(code>22){
				if(code==23){
					if ((v *= 2.0) < 1.0) return 0.5 - 0.5 * sqrt(1.0 - v * v);
					return 0.5 * sqrt(1.0 - (v -= 2.0) * v) + 0.5;
				}else if(code==24){
					return -pow(2.0, -10.0 + 10.0 * v) * sin((1.0 - elastic_const2 - v) * elastic_const);
				}else if(code==25){
					return pow(2.0, -10.0 * v) * sin((v - elastic_const2) * elastic_const) + 1.0;
				}else if(code==26){
					return pow(2.0, -10.0 * v) * sin((0.5 * v - elastic_const2) * elastic_const) + 1.0;
				}else{
					return pow(2.0, -10.0 * v) * sin((0.25 * v - elastic_const2) * elastic_const) + 1.0;
				}
			}else{
				if(code==19){
					return -pow(2.0, -10.0 * v) + 1.0;
				}else if(code==20){
					if (v < 0.5) return 0.5 * pow(2.0, 20.0 * v - 10.0);
					return 1.0 - 0.5 * pow(2.0, -20.0 * v + 10.0);
				}else if(code==21){
					return 1.0 - sqrt(1.0 - v * v);
				}else{
					return sqrt(1.0 - --v * v);
				}
			}
		}else if(code>31){
			if(code==32){
				v = 1.0 - v;
				if (v < bounce_const)
					return 1.0 - 7.5625 * v * v;
				if (v < 2.0 * bounce_const)
					return 1.0 - (7.5625 * (v -= 1.5 * bounce_const) * v + 0.75);
				if (v < 2.5 * bounce_const)
					return 1.0 - (7.5625 * (v -= 2.25 * bounce_const) * v + 0.9375);
				return 1.0 - (7.5625 * (v -= 2.625 * bounce_const) * v + 0.984375);
			}else if(code==33){
				return outBounce(v);
			}else if(code==34){
				if (v < 0.5){
					return 0.5 - 0.5 * outBounce(1.0 - v * 2.0);
				}else{
					return outBounce((v - 0.5) * 2.0) * 0.5 + 0.5;
				}
			}else if(code==35){
				return --v * pow(v, 10.0) + 1.0;
			}else{
				if(v>0.99999)return 1.0;
				return 0.0;
			}
		}else{
			if(code==28){
				if ((v *= 2.0) < 1.0)
					return -0.5 * pow(2.0, -10.0 + 10.0 * v) * sin((1.0 - elastic_const2 * 1.5 - v) * elastic_const / 1.5);
				return 0.5 * pow(2.0, -10.0 * --v) * sin((v - elastic_const2 * 1.5) * elastic_const / 1.5) + 1.0;
			}else if(code==29){
				return v * v * ((back_const + 1.0) * v - back_const);
			}else if(code==30){
				return --v * v * ((back_const + 1.0) * v + back_const) + 1.0;
			}else{
				if ((v *= 2.0) < 1.0)
					return 0.5 * v * v * ((back_const2 + 1.0) * v - back_const2);
				return 0.5 * ((v -= 2.0) * v * ((back_const2 + 1.0) * v + back_const2) + 2.0);
			}
		}
	}else if(code>9){
		if(code>14){
			if(code==15){
				return 1.0 - cos(v * pi * 0.5);
			}else if(code==16){
				return sin(v * pi * 0.5);
			}else if(code==17){
				return 0.5 - 0.5 * cos(pi * v);
			}else{
				return pow(2.0, 10.0 * (v - 1.0));
			}
		}else{
			if(code==10){
				return 1.0 - --v * v * v * v;
			}else if(code==11){
				if (v < 0.5) return v * v * v * v * 8.0;
				return --v * v * v * v * -8.0 + 1.0;
			}else if(code==12){
				return v * v * v * v * v;
			}else if(code==13){
				return --v * v * v * v * v + 1.0;
			}else{
				if (v < 0.5) return v * v * v * v * v * 16.0;
				return --v * v * v * v * v * 16.0 + 1.0;
			}
		}
	}else if(code>4){
		if(code==5){
			if (v < 0.5) return v * v * 2.0;
			return --v * v * -2.0 + 1.0;
		}else if(code==6){
			return v * v * v;
		}else if(code==7){
			return --v * v * v + 1.0;
		}else if(code==8){
			if (v < 0.5) return v * v * v * 4.0;
			return --v * v * v * 4.0 + 1.0;
		}else{
			return v * v * v * v;
		}
	}else{
		if(code==1||code==4)return v * (2.0 - v);
		return v*v;
	}
}

float applyEasing(float v1,float v2,float t,int e){
	return mix(v1,v2,easing(clamp(t,0.0,1.0),e));
}

vec2 applyEasing(vec2 v1,vec2 v2,float t,int e){
	return mix(v1,v2,easing(clamp(t,0.0,1.0),e));
}

vec3 applyEasing(vec3 v1,vec3 v2,float t,int e){
	return mix(v1,v2,easing(clamp(t,0.0,1.0),e));
}

vec4 applyEasing(vec4 v1,vec4 v2,float t,int e){
	return mix(v1,v2,easing(clamp(t,0.0,1.0),e));
}
